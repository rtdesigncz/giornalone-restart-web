// src/app/consulenze/ConsulenzeClient.tsx
"use client";

import { useEffect, useMemo, useState } from "react";

type Gestione = { id: string; nome: string; descrizione?: string | null };
type KPIOverview = {
  gestione_id: string;
  totale_clienti: number;
  contattati: number;
  preso_appuntamento: number;
  consulenza_fatta: number;
  consulenza_da_fare: number;
};
type KPIEsiti = { gestione_id: string; esito: string | null; cnt: number };
type KPINuoviAbb = { gestione_id: string; nuovo_abbonamento_name: string | null; cnt: number };

type Item = {
  id: string;
  gestione_id: string;
  nome: string | null;
  cognome: string | null;
  telefono: string | null;
  scadenza: string | null; // YYYY-MM-DD
  tipo_abbonamento_corrente: string | null;

  contattato: boolean | null;
  preso_appuntamento: boolean | null;
  consulenza_fatta: boolean | null;

  data_consulenza: string | null; // YYYY-MM-DD
  esito: "ISCRIZIONE" | "RINNOVO" | "INTEGRAZIONE" | "IN ATTESA" | "NEGATIVO" | null;
  nuovo_abbonamento_name: string | null;
  data_risposta: string | null; // YYYY-MM-DD

  note: string | null;
};

const ESITI = ["ISCRIZIONE","RINNOVO","INTEGRAZIONE","IN ATTESA","NEGATIVO"] as const;

export default function ConsulenzeClient() {
  // Stato base
  const [gestioni, setGestioni] = useState<Gestione[]>([]);
  const [gestioneId, setGestioneId] = useState<string>("");
  const [items, setItems] = useState<Item[]>([]);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string>("");

  // KPI
  const [kpiOverview, setKpiOverview] = useState<KPIOverview | null>(null);
  const [kpiEsiti, setKpiEsiti] = useState<KPIEsiti[]>([]);
  const [kpiAbb, setKpiAbb] = useState<KPINuoviAbb[]>([]);

  // Opzioni Nuovo Abbonamento (fonte ufficiale tipi_abbonamento -> names)
  const [abbOptions, setAbbOptions] = useState<string[]>([]);

  // Filtri UI
  const [q, setQ] = useState("");
  const [fContattati, setFContattati] = useState(false);
  const [fAppuntamenti, setFAppuntamenti] = useState(false);
  const [fConsFatte, setFConsFatte] = useState(false);
  const [fEsiti, setFEsiti] = useState<string[]>([]);
  const [fAbb, setFAbb] = useState<string[]>([]);

  // Carica gestioni
  useEffect(() => {
    (async () => {
      const res = await fetch("/api/consulenze/gestioni");
      const j = await res.json();
      setGestioni(j.rows || []);
      if (!gestioneId && j.rows?.[0]?.id) setGestioneId(j.rows[0].id);
    })().catch(() => {});
  }, []);

  // Carica opzioni abbonamenti
  useEffect(() => {
    (async () => {
      const res = await fetch("/api/consulenze/options/abbonamenti");
      const j = await res.json();
      setAbbOptions(j.options || []);
    })().catch(() => {});
  }, []);

  // Carica items + KPI per gestione
  useEffect(() => {
    if (!gestioneId) return;
    setLoading(true);
    setErr("");
    (async () => {
      try {
        const [ri, rk] = await Promise.all([
          fetch(`/api/consulenze/items?gestione=${gestioneId}`),
          fetch(`/api/consulenze/kpi?gestione=${gestioneId}`),
        ]);
        if (!ri.ok) throw new Error("Errore caricamento righe");
        if (!rk.ok) throw new Error("Errore caricamento KPI");
        const ji = await ri.json();
        const jk = await rk.json();
        setItems(ji.rows || []);
        setKpiOverview(jk.overview || null);
        setKpiEsiti(jk.esiti || []);
        setKpiAbb(jk.nuovi_abbonamenti || []);
      } catch (e:any) {
        setErr(String(e?.message || e));
      } finally {
        setLoading(false);
      }
    })();
  }, [gestioneId]);

  // Filtri client-side
  const rows = useMemo(() => {
    const qq = q.trim().toLowerCase();
    return items.filter((r) => {
      if (qq) {
        const s = `${r.nome||""} ${r.cognome||""} ${r.telefono||""}`.toLowerCase();
        if (!s.includes(qq)) return false;
      }
      if (fContattati && !r.contattato) return false;
      if (fAppuntamenti && !r.preso_appuntamento) return false;
      if (fConsFatte && !r.consulenza_fatta) return false;
      if (fEsiti.length && (!r.esito || !fEsiti.includes(r.esito))) return false;
      if (fAbb.length && (!r.nuovo_abbonamento_name || !fAbb.includes(r.nuovo_abbonamento_name))) return false;
      return true;
    });
  }, [items, q, fContattati, fAppuntamenti, fConsFatte, fEsiti, fAbb]);

  // Helpers
  const colorForEsito = (e: Item["esito"]) => {
    if (!e) return "";
    if (e === "IN ATTESA") return "bg-yellow-50";
    if (e === "NEGATIVO") return "bg-red-50";
    if (["ISCRIZIONE","RINNOVO","INTEGRAZIONE"].includes(e)) return "bg-green-50";
    return "";
    };
  const toggleStrIn = (arr:string[], set:(v:string[])=>void, val:string)=>{
    if(arr.includes(val)) set(arr.filter(x=>x!==val)); else set([...arr, val]);
  };

  // Gestione CRUD (uso prompt per semplicitÃ  step 1; poi mettiamo modali)
  const creaGestione = async () => {
    const nome = window.prompt("Nome della gestione?");
    if (!nome) return;
    const res = await fetch("/api/consulenze/gestioni", {
      method:"POST", headers:{ "Content-Type":"application/json" },
      body: JSON.stringify({ nome })
    });
    if (res.ok) {
      const j = await res.json();
      setGestioni((g)=>[...g, j.row]);
      setGestioneId(j.row.id);
    } else alert("Errore creazione gestione");
  };
  const rinominaGestione = async () => {
    if (!gestioneId) return;
    const nome = window.prompt("Nuovo nome gestione?");
    if (!nome) return;
    const res = await fetch(`/api/consulenze/gestioni?id=${gestioneId}`, {
      method:"PATCH", headers:{ "Content-Type":"application/json" },
      body: JSON.stringify({ nome })
    });
    if (res.ok) {
      setGestioni((g)=>g.map(x=>x.id===gestioneId?{...x, nome}:x));
    } else alert("Errore rinomina gestione");
  };
  const eliminaGestione = async () => {
    if (!gestioneId) return;
    if (!confirm("Eliminare questa gestione e tutte le righe?")) return;
    const res = await fetch(`/api/consulenze/gestioni?id=${gestioneId}`, { method:"DELETE" });
    if (res.ok) {
      setGestioni((g)=>g.filter(x=>x.id!==gestioneId));
      setGestioneId(gestioni.filter(x=>x.id!==gestioneId)[0]?.id || "");
      setItems([]);
    } else alert("Errore eliminazione gestione");
  };

  // Items CRUD
  const salvaItem = async (patch: Partial<Item> & {id:string}) => {
    const res = await fetch(`/api/consulenze/items?id=${patch.id}`, {
      method:"PATCH", headers:{ "Content-Type":"application/json" }, body: JSON.stringify(patch)
    });
    if (!res.ok) alert("Errore salvataggio riga");
  };
  const aggiungiRiga = async () => {
    if (!gestioneId) { alert("Seleziona una gestione"); return; }
    const res = await fetch(`/api/consulenze/items`, {
      method:"POST", headers:{ "Content-Type":"application/json" },
      body: JSON.stringify({ gestione_id: gestioneId, nome:"", cognome:"", telefono:"" })
    });
    if (res.ok) {
      const j = await res.json();
      setItems((it)=>[j.row, ...it]);
    } else alert("Errore aggiunta riga");
  };
  const eliminaRiga = async (id:string) => {
    if (!confirm("Eliminare la riga?")) return;
    const res = await fetch(`/api/consulenze/items?id=${id}`, { method:"DELETE" });
    if (res.ok) setItems(it=>it.filter(r=>r.id!==id));
    else alert("Errore eliminazione riga");
  };

  // Logica abilitazione campi
  const isConsFatta = (r:Item) => !!r.consulenza_fatta;
  const esitoAbilitaNuovoAbb = (r:Item) => r.esito && ["ISCRIZIONE","RINNOVO","INTEGRAZIONE"].includes(r.esito);
  const esitoAbilitaDataRisposta = (r:Item) => r.esito === "IN ATTESA";

  return (
    <div className="space-y-6">
      {/* Barra gestione + azioni */}
      <div className="flex flex-col md:flex-row md:items-center gap-3">
        <div className="flex items-center gap-2">
          <label className="text-sm text-slate-600">Gestione</label>
          <select
            className="input"
            value={gestioneId}
            onChange={(e)=>setGestioneId(e.target.value)}
          >
            {gestioni.map(g=>(
              <option key={g.id} value={g.id}>{g.nome}</option>
            ))}
          </select>
        </div>
        <div className="flex gap-2">
          <button className="btn" onClick={creaGestione}>+ Nuova gestione</button>
          <button className="btn btn-ghost" onClick={rinominaGestione} disabled={!gestioneId}>Rinomina</button>
          <button className="btn btn-ghost" onClick={eliminaGestione} disabled={!gestioneId}>Elimina</button>
        </div>
      </div>

      {/* KPI */}
      <div className="grid grid-cols-2 md:grid-cols-6 gap-3">
        <div className="p-3 border rounded-lg bg-white">
          <div className="text-xs text-slate-500">Totale clienti</div>
          <div className="text-xl font-semibold">{kpiOverview?.totale_clienti ?? 0}</div>
        </div>
        <div className="p-3 border rounded-lg bg-white">
          <div className="text-xs text-slate-500">Contattati</div>
          <div className="text-xl font-semibold">{kpiOverview?.contattati ?? 0}</div>
        </div>
        <div className="p-3 border rounded-lg bg-white">
          <div className="text-xs text-slate-500">Preso appuntamento</div>
          <div className="text-xl font-semibold">{kpiOverview?.preso_appuntamento ?? 0}</div>
        </div>
        <div className="p-3 border rounded-lg bg-white">
          <div className="text-xs text-slate-500">Consulenza fatta</div>
          <div className="text-xl font-semibold">{kpiOverview?.consulenza_fatta ?? 0}</div>
        </div>
        <div className="p-3 border rounded-lg bg-white">
          <div className="text-xs text-slate-500">Consulenza da fare</div>
          <div className="text-xl font-semibold">{kpiOverview?.consulenza_da_fare ?? 0}</div>
        </div>
        <div className="p-3 border rounded-lg bg-white">
          <div className="text-xs text-slate-500">Esiti (tot)</div>
          <div className="text-xl font-semibold">{kpiEsiti.reduce((a,b)=>a+(b.cnt||0),0)}</div>
        </div>
      </div>

      {/* Filtri */}
      <div className="rounded-xl border bg-white p-3 shadow-sm">
        <div className="flex flex-wrap items-center gap-3">
          <input
            className="input"
            placeholder="Cerca nome, cognome o telefonoâ¦"
            value={q}
            onChange={(e)=>setQ(e.target.value)}
          />
          <label className="inline-flex items-center gap-2">
            <input type="checkbox" checked={fContattati} onChange={e=>setFContattati(e.target.checked)} />
            <span>Contattati</span>
          </label>
          <label className="inline-flex items-center gap-2">
            <input type="checkbox" checked={fAppuntamenti} onChange={e=>setFAppuntamenti(e.target.checked)} />
            <span>Appuntamenti</span>
          </label>
          <label className="inline-flex items-center gap-2">
            <input type="checkbox" checked={fConsFatte} onChange={e=>setFConsFatte(e.target.checked)} />
            <span>Consulenze fatte</span>
          </label>

          <div className="flex items-center gap-2">
            <span className="text-sm text-slate-600">Esito</span>
            <div className="flex flex-wrap gap-2">
              {ESITI.map(e => (
                <label key={e} className="inline-flex items-center gap-1 text-xs border rounded px-2 py-1">
                  <input
                    type="checkbox"
                    checked={fEsiti.includes(e)}
                    onChange={()=>toggleStrIn(fEsiti,setFEsiti,e)}
                  />
                  <span>{e}</span>
                </label>
              ))}
            </div>
          </div>

          <div className="flex items-center gap-2">
            <span className="text-sm text-slate-600">Nuovo abbonamento</span>
            <div className="flex flex-wrap gap-2">
              {abbOptions.map(n => (
                <label key={n} className="inline-flex items-center gap-1 text-xs border rounded px-2 py-1">
                  <input
                    type="checkbox"
                    checked={fAbb.includes(n)}
                    onChange={()=>toggleStrIn(fAbb,setFAbb,n)}
                  />
                  <span>{n}</span>
                </label>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Azioni */}
      <div className="flex justify-between">
        <div className="text-slate-500 text-sm">{rows.length} risultati</div>
        <div className="flex gap-2">
          <button className="btn" onClick={aggiungiRiga}>+ Aggiungi</button>
          {/* Import CSV arriverÃ  nello step successivo */}
        </div>
      </div>

      {/* Tabella */}
      <div className="rounded-xl border bg-white shadow-sm overflow-x-auto">
        {err && <div className="p-3 text-red-600">{err}</div>}
        {loading ? (
          <div className="p-3 text-slate-500">Caricamentoâ¦</div>
        ) : (
          <table className="min-w-full text-sm">
            <thead>
              <tr className="text-left text-slate-600">
                <th className="py-2 px-3">NOME</th>
                <th className="py-2 px-3">COGNOME</th>
                <th className="py-2 px-3">SCADENZA</th>
                <th className="py-2 px-3">TIPO ABB.</th>
                <th className="py-2 px-3">TELEFONO</th>
                <th className="py-2 px-3">CONTATTATO</th>
                <th className="py-2 px-3">PRESO APP.</th>
                <th className="py-2 px-3">CONS. FATTA</th>
                <th className="py-2 px-3">DATA CONS.</th>
                <th className="py-2 px-3">ESITO</th>
                <th className="py-2 px-3">NUOVO ABB.</th>
                <th className="py-2 px-3">DATA RISPOSTA</th>
                <th className="py-2 px-3">NOTE</th>
                <th className="py-2 px-3">Azioni</th>
              </tr>
            </thead>
            <tbody>
              {rows.length ? rows.map(r => {
                const consFatta = isConsFatta(r);
                const abilAbb = esitoAbilitaNuovoAbb(r);
                const abilRisposta = esitoAbilitaDataRisposta(r);
                const trClass = colorForEsito(r.esito);
                return (
                  <tr key={r.id} className={`border-t ${trClass}`}>
                    <td className="py-2 px-3"><input className="input w-40" value={r.nome||""} onChange={e=>setItems(it=>it.map(x=>x.id===r.id?{...x,nome:e.target.value}:x))} onBlur={()=>salvaItem({id:r.id,nome:r.nome||""})}/></td>
                    <td className="py-2 px-3"><input className="input w-40" value={r.cognome||""} onChange={e=>setItems(it=>it.map(x=>x.id===r.id?{...x,cognome:e.target.value}:x))} onBlur={()=>salvaItem({id:r.id,cognome:r.cognome||""})}/></td>
                    <td className="py-2 px-3"><input type="date" className="input w-40" value={r.scadenza||""} onChange={e=>{const v=e.target.value; setItems(it=>it.map(x=>x.id===r.id?{...x,scadenza:v}:x));}} onBlur={()=>salvaItem({id:r.id,scadenza:r.scadenza})}/></td>
                    <td className="py-2 px-3"><input className="input w-44" value={r.tipo_abbonamento_corrente||""} onChange={e=>setItems(it=>it.map(x=>x.id===r.id?{...x,tipo_abbonamento_corrente:e.target.value}:x))} onBlur={()=>salvaItem({id:r.id,tipo_abbonamento_corrente:r.tipo_abbonamento_corrente||null})}/></td>
                    <td className="py-2 px-3"><input className="input w-40" value={r.telefono||""} onChange={e=>setItems(it=>it.map(x=>x.id===r.id?{...x,telefono:e.target.value}:x))} onBlur={()=>salvaItem({id:r.id,telefono:r.telefono||""})}/></td>
                    <td className="py-2 px-3">
                      <input type="checkbox" checked={!!r.contattato} onChange={async e=>{
                        const v = e.target.checked; setItems(it=>it.map(x=>x.id===r.id?{...x,contattato:v}:x));
                        await salvaItem({id:r.id,contattato:v});
                      }}/>
                    </td>
                    <td className="py-2 px-3">
                      <input type="checkbox" checked={!!r.preso_appuntamento} onChange={async e=>{
                        const v = e.target.checked; setItems(it=>it.map(x=>x.id===r.id?{...x,preso_appuntamento:v}:x));
                        await salvaItem({id:r.id,preso_appuntamento:v});
                      }}/>
                    </td>
                    <td className="py-2 px-3">
                      <input type="checkbox" checked={!!r.consulenza_fatta} onChange={async e=>{
                        const v = e.target.checked;
                        // se disattivo, azzero campi dipendenti
                        const patch:any = { consulenza_fatta:v };
                        const next = { ...r, consulenza_fatta: v } as Item;
                        if (!v) { patch.data_consulenza = null; patch.esito = null; patch.nuovo_abbonamento_name = null; patch.data_risposta = null; }
                        setItems(it=>it.map(x=>x.id===r.id?{...x,...patch}:x));
                        await salvaItem({ id:r.id, ...patch });
                      }}/>
                    </td>
                    <td className="py-2 px-3">
                      <input type="date" className="input w-40" disabled={!consFatta} value={r.data_consulenza||""}
                        onChange={e=>{const v=e.target.value; setItems(it=>it.map(x=>x.id===r.id?{...x,data_consulenza:v}:x));}}
                        onBlur={()=>salvaItem({id:r.id,data_consulenza:r.data_consulenza})}/>
                    </td>
                    <td className="py-2 px-3">
                      <select className="input w-44" disabled={!consFatta} value={r.esito||""}
                        onChange={async e=>{
                          const v = (e.target.value || null) as Item["esito"];
                          // se cambio esito, gestisco abilitazioni dipendenti
                          const patch:any = { esito: v };
                          if (!v || !["ISCRIZIONE","RINNOVO","INTEGRAZIONE"].includes(v)) patch.nuovo_abbonamento_name = null;
                          if (v !== "IN ATTESA") patch.data_risposta = null;
                          setItems(it=>it.map(x=>x.id===r.id?{...x,...patch}:x));
                          await salvaItem({id:r.id, ...patch});
                        }}>
                        <option value="">â</option>
                        {ESITI.map(e=><option key={e} value={e}>{e}</option>)}
                      </select>
                    </td>
                    <td className="py-2 px-3">
                      <select className="input w-52" disabled={!consFatta || !abilAbb} value={r.nuovo_abbonamento_name||""}
                        onChange={e=>{const v=e.target.value||null; setItems(it=>it.map(x=>x.id===r.id?{...x,nuovo_abbonamento_name:v}:x));}}
                        onBlur={()=>salvaItem({id:r.id,nuovo_abbonamento_name:r.nuovo_abbonamento_name})}>
                        <option value=""></option>
                        {abbOptions.map(n=><option key={n} value={n}>{n}</option>)}
                      </select>
                    </td>
                    <td className="py-2 px-3">
                      <input type="date" className="input w-40" disabled={!consFatta || !abilRisposta}
                        value={r.data_risposta||""}
                        onChange={e=>{const v=e.target.value; setItems(it=>it.map(x=>x.id===r.id?{...x,data_risposta:v}:x));}}
                        onBlur={()=>salvaItem({id:r.id,data_risposta:r.data_risposta})}/>
                    </td>
                    <td className="py-2 px-3">
                      <input className="input w-64" value={r.note||""}
                        onChange={e=>setItems(it=>it.map(x=>x.id===r.id?{...x,note:e.target.value}:x))}
                        onBlur={()=>salvaItem({id:r.id,note:r.note||""})}/>
                    </td>
                    <td className="py-2 px-3">
                      <div className="flex gap-2">
                        {/* WhatsApp: chat vuota */}
                        {r.telefono ? (
                          <a className="btn btn-ghost"
                             href={`https://wa.me/${encodeURIComponent(r.telefono)}`}
                             target="_blank" rel="noreferrer" title="WhatsApp">
                            WA
                          </a>
                        ) : null}
                        <button className="btn btn-ghost" onClick={()=>eliminaRiga(r.id)} title="Elimina">ðï¸</button>
                      </div>
                    </td>
                  </tr>
                );
              }) : (
                <tr><td colSpan={14} className="py-6 text-center text-slate-500">Nessuna riga</td></tr>
              )}
            </tbody>
          </table>
        )}
      </div>

      {/* Esiti & Nuovi abbonamenti (liste sintetiche) */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
        <div className="rounded-xl border bg-white p-3 shadow-sm">
          <div className="font-medium mb-2">Esiti</div>
          <div className="flex flex-wrap gap-2">
            {ESITI.map(e=>{
              const cnt = kpiEsiti.find(x=>x.esito===e)?.cnt || 0;
              return <span key={e} className="tag">{e}: {cnt}</span>;
            })}
          </div>
        </div>
        <div className="rounded-xl border bg-white p-3 shadow-sm">
          <div className="font-medium mb-2">Nuovi abbonamenti</div>
          <div className="flex flex-wrap gap-2">
            {kpiAbb.length ? kpiAbb.map(a=>(
              <span key={a.nuovo_abbonamento_name||"__"} className="tag">
                {a.nuovo_abbonamento_name}: {a.cnt}
              </span>
            )) : <span className="text-slate-500 text-sm">Nessun dato</span>}
          </div>
        </div>
      </div>
    </div>
  );
}
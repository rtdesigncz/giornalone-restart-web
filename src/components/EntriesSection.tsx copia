// src/components/EntriesSection.tsx
"use client";

import { useEffect, useMemo, useState } from "react";
import { useSearchParams } from "next/navigation";
import { supabase } from "@/lib/supabaseClient";
import SectionTableShell from "./SectionTableShell";
import { MessageCircle, Phone, Pencil, Trash2, Check, X } from "lucide-react";
import EntryCard from "./EntryCard";

type AnyObj = Record<string, any>;
type Consulente = { id: string; nome?: string | null; name?: string | null };
type TipoAbbonamento = { id: string; nome?: string | null; name?: string | null };

type Entry = {
  id: string;
  entry_date: string;            // YYYY-MM-DD
  entry_time: string | null;     // HH:MM:SS
  section: string;
  nome: string | null;
  cognome: string | null;
  telefono: string | null;
  consulente_id: string | null;
  tipo_abbonamento_id: string | null;
  fonte: string | null;
  comeback: boolean;
  miss: boolean;
  note: string | null;
  venduto: boolean;
  created_at: string;
  updated_at: string;
  consulente?: AnyObj | null;
  tipo_abbonamento?: AnyObj | null;
};

const lbl = (o?: AnyObj | null) => ((o?.nome ?? o?.name ?? "") as string);

function toHHMM(t: string | null) { if (!t) return ""; const [hh, mm] = t.split(":"); return `${hh}:${mm}`; }
function hhmmToDb(t: string) { if (!t) return null; const p=t.split(":"); if (p.length<2) return null; return `${p[0]}:${p[1]}:00`; }
function nowHHMM() { const d=new Date(); const hh=String(d.getHours()).padStart(2,"0"); const mm=String(d.getMinutes()).padStart(2,"0"); return `${hh}:${mm}`; }
function parseISODate(s: string) { const [y,m,d]=s.split("-").map(Number); return new Date(Date.UTC(y,(m||1)-1,d||1)); }
function sanitizePhone(raw: string | null){ if(!raw) return ""; let n=raw.replace(/[^\d+]/g,""); if(!n.startsWith("+")){ if(n.startsWith("00")) n="+"+n.slice(2); else n="+39"+n; } return n; }
function waText(e: Entry){ const nome=e.nome ?? ""; const d=e.entry_date?parseISODate(e.entry_date):new Date(); const fmt=new Intl.DateTimeFormat("it-IT",{day:"2-digit",month:"2-digit",year:"numeric"}); const giorno=fmt.format(d); const ora=toHHMM(e.entry_time); const consulente=lbl(e.consulente); return `Ciao ${nome},%0A%0ATi ricordiamo l'appuntamento del giorno ${giorno}, alle ore ${ora}, con ${consulente}. Ti aspettiamo!%0A%0ARestart Fitness Club`; }

export default function EntriesSection({ title }: { title: string }) {
  const sp = useSearchParams();

  const scope = sp.get("scope") ?? "day";
  const dateParam = sp.get("date") ?? new Date().toISOString().slice(0, 10);
  const fromParam = sp.get("from") ?? dateParam;
  const toParam = sp.get("to") ?? dateParam;

  const q = sp.get("q") ?? "";
  const consulente = sp.get("consulente") ?? "";
  const tipo = sp.get("tipo") ?? "";
  const missOnly = sp.get("miss") === "1";
  const vendutoOnly = sp.get("venduto") === "1";

  const showDate = useMemo(() => scope !== "day", [scope]);

  const [rows, setRows] = useState<Entry[]>([]);
  const [loading, setLoading] = useState(false);

  // Editing (tabella desktop)
  const [editingId, setEditingId] = useState<string | null>(null);
  const [draft, setDraft] = useState<Partial<Entry>>({});

  // Opzioni select
  const [consulenti, setConsulenti] = useState<Consulente[]>([]);
  const [tipi, setTipi] = useState<TipoAbbonamento[]>([]);

  useEffect(() => {
    (async () => {
      const [{ data: cData }, { data: tData }] = await Promise.all([
        supabase.from("consulenti").select("*"),
        supabase.from("tipi_abbonamento").select("*"),
      ]);
      setConsulenti((cData ?? []) as Consulente[]);
      setTipi((tData ?? []) as TipoAbbonamento[]);
    })();
  }, []);

  // ---- LOAD ENTRIES con FILTRI
  useEffect(() => {
    let active = true;

    async function load() {
      setLoading(true);

      let qy = supabase
        .from("entries")
        .select(
          `
            *,
            consulente:consulenti (*),
            tipo_abbonamento:tipi_abbonamento (*)
          `
        )
        .eq("section", title)
        .order("entry_date", { ascending: false })
        .order("entry_time", { ascending: true });

      // periodo
      if (scope === "day") {
        qy = qy.eq("entry_date", dateParam);
      } else {
        qy = qy.gte("entry_date", fromParam).lte("entry_date", toParam);
      }

      // ricerca testo
      if (q && q.trim().length > 0) {
        const like = `%${q.trim()}%`;
        // or su piÃ¹ colonne
        qy = qy.or(
          `nome.ilike.${like},cognome.ilike.${like},telefono.ilike.${like},fonte.ilike.${like},note.ilike.${like}`
        );
      }

      // consulente
      if (consulente) qy = qy.eq("consulente_id", consulente);

      // tipo
      if (tipo) qy = qy.eq("tipo_abbonamento_id", tipo);

      // flags
      if (missOnly) qy = qy.eq("miss", true);
      if (vendutoOnly) qy = qy.eq("venduto", true);

      const { data, error } = await qy;
      if (!active) return;
      if (error) {
        console.error("load entries error", error);
        setRows([]);
      } else {
        setRows((data ?? []) as Entry[]);
      }
      setLoading(false);
      setEditingId(null);
      setDraft({});
    }

    load();
    return () => { active = false; };
  }, [title, scope, dateParam, fromParam, toParam, q, consulente, tipo, missOnly, vendutoOnly]);

  // ---- INSERT (+ edit)
  const handleAdd = async () => {
    const dateForInsert =
      scope === "day" ? dateParam : scope === "month" ? dateParam : scope === "year" ? dateParam : fromParam;
    const timeForInsert = title === "TOUR SPONTANEI" ? nowHHMM() : "";
    const insertObj = {
      entry_date: dateForInsert,
      entry_time: timeForInsert ? timeForInsert + ":00" : null,
      section: title,
      nome: "",
      cognome: "",
      telefono: "",
      consulente_id: null,
      tipo_abbonamento_id: null,
      fonte: "",
      comeback: false,
      miss: false,
      note: "",
      venduto: false,
    };
    const { data, error } = await supabase
      .from("entries")
      .insert(insertObj)
      .select(
        `
          *,
          consulente:consulenti (*),
          tipo_abbonamento:tipi_abbonamento (*)
        `
      )
      .single();
    if (error) { alert("Errore inserimento: " + error.message); return; }
    const row = data as Entry;
    setRows((prev) => [row, ...prev]);
    setEditingId(row.id);
    setDraft({ ...row, entry_time: toHHMM(row.entry_time) });
  };

  // ---- EDIT (tabella desktop)
  const startEdit = (row: Entry) => {
    setEditingId(row.id);
    setDraft({ ...row, entry_time: toHHMM(row.entry_time) });
  };
  const cancelEdit = () => { setEditingId(null); setDraft({}); };

  const saveEdit = async () => {
    if (!editingId) return;
    const d = draft as Entry;
    const payload: Partial<Entry> = {
      nome: d.nome ?? "",
      cognome: d.cognome ?? "",
      telefono: d.telefono ?? "",
      fonte: d.fonte ?? "",
      note: d.note ?? "",
      consulente_id: d.consulente_id ?? null,
      tipo_abbonamento_id: d.tipo_abbonamento_id ?? null,
      comeback: !!d.comeback,
      miss: !!d.miss,
      venduto: !!d.venduto,
      entry_time: d.entry_time ? (typeof d.entry_time === "string" ? hhmmToDb(d.entry_time) : d.entry_time) : null,
    };
    const { error } = await supabase.from("entries").update(payload).eq("id", editingId);
    if (error) { alert("Errore salvataggio: " + error.message); return; }
    const { data, error: e2 } = await supabase
      .from("entries")
      .select(
        `
          *,
          consulente:consulenti (*),
          tipo_abbonamento:tipi_abbonamento (*)
        `
      )
      .eq("id", editingId)
      .single();
    if (e2) { alert("Errore caricamento riga: " + e2.message); return; }
    const fresh = data as Entry;
    setRows((prev) => prev.map((r) => (r.id === editingId ? fresh : r)));
    setEditingId(null);
    setDraft({});
  };

  // ---- DELETE
  const handleDelete = async (row: Entry) => {
    if (!confirm("Eliminare questa riga?")) return;
    const { error } = await supabase.from("entries").delete().eq("id", row.id);
    if (error) return alert("Errore eliminazione: " + error.message);
    setRows((prev) => prev.filter((r) => r.id !== row.id));
  };

  // ---- AZIONI (WA/Call)
  const handleWhatsApp = (row: Entry) => {
    const to = sanitizePhone(row.telefono);
    const msg = waText(row);
    if (!to) return alert("Numero non valido.");
    window.open(`https://wa.me/${encodeURIComponent(to)}?text=${msg}`, "_blank");
  };
  const handleCall = (row: Entry) => {
    const to = sanitizePhone(row.telefono);
    if (!to) return alert("Numero non valido.");
    window.location.href = `tel:${to}`;
  };

  // ---- Toggle Miss/Venduto (usati nelle card mobile; rispettano XOR)
  const toggleMiss = async (row: Entry) => {
    const nextMiss = !row.miss;
    const { error } = await supabase
      .from("entries")
      .update({ miss: nextMiss, venduto: nextMiss ? false : row.venduto })
      .eq("id", row.id);
    if (error) return alert("Errore aggiornamento: " + error.message);
    setRows((prev) =>
      prev.map((r) =>
        r.id === row.id ? { ...r, miss: nextMiss, venduto: nextMiss ? false : r.venduto } : r
      )
    );
  };
  const toggleVenduto = async (row: Entry) => {
    const nextVend = !row.venduto;
    const { error } = await supabase
      .from("entries")
      .update({ venduto: nextVend, miss: nextVend ? false : row.miss })
      .eq("id", row.id);
    if (error) return alert("Errore aggiornamento: " + error.message);
    setRows((prev) =>
      prev.map((r) =>
        r.id === row.id ? { ...r, venduto: nextVend, miss: nextVend ? false : r.miss } : r
      )
    );
  };

  // ====== RENDER DESKTOP (tabella) ======
  const ColGroup = () => (
    <colgroup>
      {showDate && <col className="w-[10%]" />}
      <col className="w-[5%]" />
      <col className="w-[9%]" />
      <col className="w-[10%]" />
      <col className="w-[12%]" />
      <col className="w-[10%]" />
      <col className="w-[9%]" />
      <col className="w-[6%]" />
      <col className="w-[10%]" />
      <col className="w-[5%]" />
      <col className="w-[12%]" />
      <col className="w-[6%]" />
      <col className="w-[14%]" />
    </colgroup>
  );

  const Thead = () => (
    <thead>
      <tr>
        {showDate && <th>Data</th>}
        <th>Ora</th>
        <th>Nome</th>
        <th>Cognome</th>
        <th>Telefono</th>
        <th>Consulente</th>
        <th>Fonte</th>
        <th>Come Back</th>
        <th>Tipo Abbonamento</th>
        <th>Miss</th>
        <th>Note</th>
        <th>Venduto</th>
        <th>Azioni</th>
      </tr>
    </thead>
  );

  const renderRow = (r: Entry) => {
    const isEditing = editingId === r.id;
    return (
      <tr
        key={r.id}
        className={
          (isEditing ? !!draft.venduto : r.venduto)
            ? "bg-green-100"
            : (isEditing ? !!draft.miss : r.miss)
            ? "bg-red-100"
            : undefined
        }
      >
        {showDate && (
          <td>{new Intl.DateTimeFormat("it-IT").format(parseISODate(r.entry_date))}</td>
        )}

        {/* ORA */}
        <td>
          {isEditing ? (
            <input
              type="time"
              className="input"
              value={(draft.entry_time as string) ?? ""}
              onChange={(e) => setDraft((d) => ({ ...d, entry_time: e.target.value }))}
            />
          ) : (
            toHHMM(r.entry_time)
          )}
        </td>

        {/* NOME */}
        <td>
          {isEditing ? (
            <input className="input" value={(draft.nome as string) ?? ""} onChange={(e) => setDraft((d) => ({ ...d, nome: e.target.value }))} />
          ) : (r.nome ?? "")}
        </td>

        {/* COGNOME */}
        <td>
          {isEditing ? (
            <input className="input" value={(draft.cognome as string) ?? ""} onChange={(e) => setDraft((d) => ({ ...d, cognome: e.target.value }))} />
          ) : (r.cognome ?? "")}
        </td>

        {/* TELEFONO */}
        <td>
          {isEditing ? (
            <input className="input" value={(draft.telefono as string) ?? ""} onChange={(e) => setDraft((d) => ({ ...d, telefono: e.target.value }))} />
          ) : (r.telefono ?? "")}
        </td>

        {/* CONSULENTE */}
        <td>
          {isEditing ? (
            <select className="select" value={(draft.consulente_id as string) ?? ""} onChange={(e) => setDraft((d) => ({ ...d, consulente_id: e.target.value || null }))}>
              <option value="">â</option>
              {consulenti.map((c) => (<option key={c.id} value={c.id}>{lbl(c)}</option>))}
            </select>
          ) : (lbl(r.consulente))}
        </td>

        {/* FONTE */}
        <td>
          {isEditing ? (
            <input className="input" value={(draft.fonte as string) ?? ""} onChange={(e) => setDraft((d) => ({ ...d, fonte: e.target.value }))} />
          ) : (r.fonte ?? "")}
        </td>

        {/* COMEBACK */}
        <td>
          {isEditing ? (
            <input type="checkbox" className="check-lg" checked={!!draft.comeback} onChange={(e) => setDraft((d) => ({ ...d, comeback: e.target.checked }))} />
          ) : (
            <input type="checkbox" className="check-lg" checked={!!r.comeback} readOnly />
          )}
        </td>

        {/* TIPO */}
        <td>
          {isEditing ? (
            <select className="select" value={(draft.tipo_abbonamento_id as string) ?? ""} onChange={(e) => setDraft((d) => ({ ...d, tipo_abbonamento_id: e.target.value || null }))}>
              <option value="">â</option>
              {tipi.map((t) => (<option key={t.id} value={t.id}>{lbl(t)}</option>))}
            </select>
          ) : (lbl(r.tipo_abbonamento))}
        </td>

        {/* MISS */}
        <td>
          {isEditing ? (
            <input
              type="checkbox"
              className="check-lg"
              checked={!!draft.miss}
              onChange={(e) =>
                setDraft((d) => ({ ...d, miss: e.target.checked, venduto: e.target.checked ? false : d.venduto }))
              }
            />
          ) : (
            <input type="checkbox" className="check-lg" checked={!!r.miss} readOnly />
          )}
        </td>

        {/* NOTE */}
        <td>
          {isEditing ? (
            <input className="input" value={(draft.note as string) ?? ""} onChange={(e) => setDraft((d) => ({ ...d, note: e.target.value }))} />
          ) : (r.note ?? "")}
        </td>

        {/* VENDUTO */}
        <td>
          {isEditing ? (
            <input
              type="checkbox"
              className="check-lg"
              checked={!!draft.venduto}
              onChange={(e) =>
                setDraft((d) => ({ ...d, venduto: e.target.checked, miss: e.target.checked ? false : d.miss }))
              }
            />
          ) : (
            <input type="checkbox" className="check-lg" checked={!!r.venduto} readOnly />
          )}
        </td>

        {/* AZIONI */}
        <td className="actions-cell">
          <div className="actions-icons">
            {isEditing ? (
              <>
                <button className="btn btn-icon" title="Salva" onClick={saveEdit}><Check size={16} color="#16a34a" /></button>
                <button className="btn btn-icon" title="Annulla" onClick={cancelEdit}><X size={16} /></button>
              </>
            ) : (
              <>
                <button className="btn btn-icon" title="WhatsApp" onClick={() => handleWhatsApp(r)}><MessageCircle size={16} color="#25D366" /></button>
                <button className="btn btn-icon" title="Chiama" onClick={() => handleCall(r)}><Phone size={16} color="#1AB4B8" /></button>
                <button className="btn btn-icon" title="Modifica" onClick={() => startEdit(r)}><Pencil size={16} /></button>
                <button className="btn btn-danger btn-icon" title="Elimina" onClick={() => handleDelete(r)}><Trash2 size={16} /></button>
              </>
            )}
          </div>
        </td>
      </tr>
    );
  };

  return (
    <SectionTableShell title={title} onAdd={handleAdd}>
      {/* MOBILE: cards (fino a md) */}
      <div className="md:hidden space-y-3 p-3">
        {loading && (
          <div className="text-center text-slate-500 text-sm py-6">
            <span className="spinner-dots"><span className="dot" /><span className="dot" /><span className="dot" /></span>
          </div>
        )}
        {!loading && rows.length === 0 && (
          <div className="text-center text-slate-500 text-sm py-6">Nessuna riga.</div>
        )}
        {!loading && rows.map((r) => (
          <EntryCard
            key={r.id}
            row={r as any}
            onEdit={() => alert("Modifica da mobile: per ora usa la tabella desktop oppure implementiamo un piccolo form modale.")}
            onDelete={handleDelete}
            onWhatsapp={handleWhatsApp}
            onCall={handleCall}
            onToggleMiss={toggleMiss}
            onToggleVenduto={toggleVenduto}
          />
        ))}
      </div>

      {/* DESKTOP: tabella (da md in su) */}
      <div className="hidden md:block">
        <div className="overflow-x-auto">
          <table className="w-full table-fixed table-flat table-compact table-dividers">
            <ColGroup />
            <Thead />
            <tbody>
              {loading && (
                <tr>
                  <td colSpan={showDate ? 13 : 12}>
                    <div className="p-3">
                      <span className="spinner-dots"><span className="dot" /><span className="dot" /><span className="dot" /></span>
                    </div>
                  </td>
                </tr>
              )}
              {!loading && rows.length === 0 && (
                <tr><td colSpan={showDate ? 13 : 12} className="text-slate-500 p-3">Nessuna riga.</td></tr>
              )}
              {!loading && rows.map(renderRow)}
            </tbody>
          </table>
        </div>
      </div>
    </SectionTableShell>
  );
}